name: Docker Image CI

on:
  push:
    branches:
      - main
  pull_request:
    branches: 
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: meybili/ec2-practica:latest

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.HOSTNAME }}  # Asegúrate de que este sea el DNS público de tu instancia EC2
        username: ec2-user                
        key: ${{ secrets.EC2_SSH_KEY }}     
        port: 22                           
        script: |
          echo "Probando conectividad al DNS público"
          ping -c 4 ${{ secrets.HOSTNAME }} || exit 1  # Verifica que el DNS sea resolvible

          docker stop $(docker ps -q) || true
          docker rm $(docker ps -a -q) || true
          docker pull meybili/ec2-practica:latest
          docker run -d -p 80:80 meybili/ec2-practica:latest

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.HOST2_DNS }}  # Asegúrate de que este sea el DNS público de tu instancia EC2
        username: ec2-user                
        key: ${{ secrets.EC2_SSH_KEY }}     
        port: 22                           
        script: |
          echo "Probando conectividad al DNS público"
          ping -c 4 ${{ secrets.HOST2_DNS }} || exit 1  # Verifica que el DNS sea resolvible

          docker stop $(docker ps -q) || true
          docker rm $(docker ps -a -q) || true
          docker pull meybili/ec2-practica:latest
          docker run -d -p 80:80 meybili/ec2-practica:latest

  deploy_to_production:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true

    steps:
    - name: Configure AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Update EC2 instances in Auto Scaling Group
      run: |
        # Actualiza el grupo de autoescalado
        aws autoscaling update-auto-scaling-group --auto-scaling-group-name AutoScalingDocker --launch-configuration-name my-launch-config

